properties([
    parameters([
        string(name: 'DOCKER_TAG', defaultValue: 'new', description: 'Image Tag')
    ])
])

node {
    try {
        // Define Docker image name with parameters
        def dockerImageName = "${DOCKER_USERNAME}/web_application:${params.DOCKER_TAG}"

        // Stage 1: Checkout the repository using Git with credentials
        stage('Checkout') {
            echo "Cloning Git repository"
            checkout([$class: 'GitSCM',
                branches: [[name: '*/master']],  
                userRemoteConfigs: [[
                    url: "https://github.com/Anil9098/Calculator-Web-Application.git",
                    credentialsId: "gitCredentialsId"
                ]]
            ])
        }

        // Stage 2: Build Docker image
        stage('Build Image') {
            echo "Building Docker image with tag: ${dockerImageName}"
            def customImage = docker.build(dockerImageName) // This builds and tags the image
        }
        
        // Stage 3: Login to Docker Hub
        stage('Login to Docker Hub') {
            withDockerRegistry([credentialsId: 'docker_hub_credentials']) {
                echo "Successfully logged into Docker Hub"
            }
        }

        // Stage 4: Push the image to Docker Hub
        stage('Push to Docker Hub') {
            echo "Pushing Docker image to Docker Hub"
            customImage.push()  // Push the built image to Docker Hub
        }

    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        echo 'Pipeline completed'
    }
}

